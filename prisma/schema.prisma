// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum TipoProducto {
  ZAPATILLA
  ROPA
}

enum Seccion {
  MASCULINO
  FEMENINO
  NINOS
  DESTACADOS
  ACCESORIOS
}

enum Rol {
  ADMIN
  USER
}

model Categoria {
  id         Int        @id @default(autoincrement())
  nombre     String
  productos  Producto[]
}

model Talle {
  id                Int               @id @default(autoincrement())
  talle             String
  detallesProductos DetalleProducto[]
}

model Descuento {
  id            Int            @id @default(autoincrement())
  fechaInicio   String
  fechaFin      String
  // Relación uno a uno con Precio
  precio        Precio?        @relation(name: "DescuentoPrecio", fields: [precioId], references: [id])
  precioId      Int?           @unique
  // Relación uno a uno con OrdenCompra
  ordenCompra   OrdenCompra?   @relation(name: "DescuentoOrdenCompra", fields: [ordenCompraId], references: [id])
  ordenCompraId Int?           @unique
}

model Precio {
  id              Int          @id @default(autoincrement())
  precioCompra    Int
  precioVenta     Int
  // Lado inverso de la relación con Descuento
  descuento       Descuento?   @relation(name: "DescuentoPrecio")
  detalleProducto DetalleProducto?
}

model ImagenProducto {
  id              Int              @id @default(autoincrement())
  url             String
  alt             String
  detalleProducto DetalleProducto?
}

model DetalleProducto {
  id               Int               @id @default(autoincrement())
  talles           Talle[]
  stock            Int
  color            String
  estado           Boolean?          @default(true)
  producto         Producto?         @relation(fields: [productoId], references: [id])
  productoId       Int?              @unique
  precio           Precio?           @relation(fields: [precioId], references: [id])
  precioId         Int?              @unique
  imagenProducto   ImagenProducto?   @relation(fields: [imagenProductoId], references: [id])
  imagenProductoId Int?              @unique
}

model Producto {
  id                  Int                    @id @default(autoincrement())
  nombre              String
  categoria           Categoria?             @relation(fields: [categoriaId], references: [id])
  categoriaId         Int?                   
  seccion             Seccion?
  tipoProducto        TipoProducto
  detallesProductos   DetalleProducto[]
  ordenCompraDetalle  OrdenCompraDetalle?
}

model User {
  id                   Int                 @id @default(autoincrement())
  email                String              @unique
  nombre               String?
  contraseña           String
  dni                  String?
  rol                  Rol?                @default(USER)
  // Relación inversa con UsuarioDireccion
  usuarioDireccion     UsuarioDireccion?   @relation(name: "UserDireccion")
}

model UsuarioDireccion {
  id                  Int                 @id @default(autoincrement())
  // Relación uno a uno con User
  user                User?               @relation(name: "UserDireccion", fields: [userId], references: [id])
  userId              Int?                @unique
  direcciones         Direccion[]
  // Relación inversa con OrdenCompra
  ordenCompra         OrdenCompra?        @relation(name: "DireccionOrdenCompra")
}

model Direccion {
  id                  Int                 @id @default(autoincrement())
  localidad           String
  pais                String
  provincia           String
  departamento        String
  usuarioDireccion    UsuarioDireccion?   @relation(fields: [usuarioDireccionId], references: [id])
  usuarioDireccionId  Int?                @unique
}

model OrdenCompra {
  id                   Int                 @id @default(autoincrement())
  // Relación uno a muchos con UsuarioDireccion
  usuarioDireccion     UsuarioDireccion?   @relation(name: "DireccionOrdenCompra", fields: [usuarioDireccionId], references: [id])
  usuarioDireccionId   Int?                @unique
  total                Int
  // Relación uno a uno con Descuento
  descuento            Descuento?          @relation(name: "DescuentoOrdenCompra")
  fechaCompra          String
  ordenCompraDetalle   OrdenCompraDetalle?
}

model OrdenCompraDetalle {
  id               Int            @id @default(autoincrement())
  ordenCompra      OrdenCompra?   @relation(fields: [ordenCompraId], references: [id])
  ordenCompraId    Int?           @unique
  producto         Producto?      @relation(fields: [productoId], references: [id])
  productoId       Int?           @unique
  cantidad         Int
}
